//语句（Statements）是执行一些操作但不返回值的指令。表达式（Expressions）计算并产生一个值

fn main() {
    //Statements
    let y = 6;
    //语句不返回值。因此，不能把 let 语句赋值给另一个变量，比如下面的例子尝试做的
    //let x = (let y = 6);
    //也不能这么写 x = y = 6;

    //表达式会计算出一些值，并且编写的大部分 Rust 代码是由表达式组成的
    //，比如 5 + 6，这是一个表达式并计算出值 11。表达式可以是语句的一部分：在示例 3-1 中，语句 let y = 6; 中的 6 是一个表达式
    //函数调用是一个表达式。宏调用是一个表达式
    let x = 5;
    let y = {
        //这个表达式是一个代码块，值为4，这个值作为 let 语句的一部分被绑定到 y 上
        let x = 3;
        x + 1 //表达式的结尾没有分号。如果在表达式的结尾加上分号，它就变成了语句，而语句不会返回值
    }; //这个分号是let语句的
    println!("The value of y is: {}", y);

    //3
    let x = five();
    println!("the value of x is: {}", x);
}

//3函数可以向调用它的代码返回值。我们并不对返回值命名，但要在箭头（->）后声明它的类型。在 Rust 中，函数的返回值等同于函数体最后一个表达式的值。使用 return 关键字和指定值，可从函数中提前返回；但大部分函数隐式的返回最后的表达式。
fn five() -> i32 {
    5
}
